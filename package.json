{
  "name": "rasterfari",
  "version": "1.0.0-alpha",
  "keywords": [
    "raster",
    "documents",
    "server",
    "wms",
    "ogc"
  ],
  "description": "it is like a webserver for your georeferenced rasterdocuments, but it understands the OGC WMS standard (a kind of)",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/cismet/rasterfari.git"
  },
  "author": "helllth",
  "contributors": [],
  "dependencies": {
    "async": "^2.6.0",
    "file-type": "^10.0.0",
    "mkdir-recursive": "^0.4.0",
    "read-chunk": "^3.0.0",
    "restify": "^6.3.4",
    "restify-cors-middleware": "^1.1.1",
    "restify-errors": "^6.1.1",
    "shescape": "^1.5.4"
  },
  "scripts": {
    "debug": "nodemon server.js --exec babel-node --inspect=0.0.0.0:9229 --watch",
    "start": "pm2-dev start app.json ",
    "start_": "pm2-dev start app.json >> /app/logs/start_$(date +\"%T\").log && exec /bin/sh -c \"trap : TERM INT; (while true; do sleep 1000; done) & wait\"",
    "dev-run": "pm2-dev start app.json >> /app/logs/dev-run.log && exec /bin/sh -c \"trap : TERM INT; (while true; do sleep 1000; done) & wait\"",
    "production-run": "pm2-docker -i 20 start app.js >> /app/logs/production-run.log && nexec /bin/sh -c \"trap : TERM INT; (while true; do sleep 1000; done) & wait\""
  },
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-preset-es2015": "^6.24.1",
    "nodemon": "^1.17.1",
    "pm2": "^3.0.3",
    "rimraf": "^2.6.2"
  }
}
